{
  "web_file": {
    "file_name": "01:資料表格視覺化",
    "file_save_01:資料表格視覺化": "{\"tx_html\":\"<!--建立表格物件，class為樣式名稱，class可以重複使用來套用同樣的樣式-->\\n<table class=\\\"data-table\\\">\\n    <!--tr 為表格中的行物件(row)-->\\n    <tr class=\\\"acceleration\\\">\\n        <!--th 為表格中的標頭物件(head)-->\\n        <th>ax</th>\\n        <th>ay</th>\\n        <th>az</th>\\n    </tr>\\n    <tr>\\n        <!--td 為表格中的元素物件(data)，id為唯一編號，一個網頁中的id不能重複-->\\n        <td id=\\\"ax\\\">999999</td>\\n        <td id=\\\"ay\\\">999999</td>\\n        <td id=\\\"az\\\">999999</td>\\n    </tr>\\n    <tr class=\\\"rotation\\\">\\n        <th>gx</th>\\n        <th>gy</th>\\n        <th>gz</th>\\n    </tr>\\n    <tr>\\n        <td id=\\\"gx\\\">999999</td>\\n        <td id=\\\"gy\\\">999999</td>\\n        <td id=\\\"gz\\\">999999</td>\\n    </tr>\\n</table>\",\"tx_css\":\"/*table 物件的樣式*/\\n.data-table {\\n    /*物件的寬度*/\\n    width: 400px;\\n    \\n    /*使物件置中*/\\n    margin: auto;\\n\\n    /*使物件上方增加100px的空間*/\\n    margin-top: 100px;\\n\\n    /*物件中文字大小為 24px*/\\n    font-size: 24px;\\n\\n    /*物件中文字置中*/\\n    text-align: center;\\n}\\n\\n/*table 物件中 td 的樣式*/\\n.data-table td {\\n    /*固定 td 寬度使其不隨著數值長度變動*/\\n    width: 125px;\\n    \\n    /*將物件四周填充 10px，增加表格的間距*/\\n    padding: 10px;\\n\\n    /*物件背景顏色*/\\n    background-color: #eee;\\n}\\n\\n/*tr 物件中 th 的樣式*/\\n.acceleration th {\\n    background-color: lightgreen;\\n}\\n\\n/*tr 物件中 th 的樣式*/\\n.rotation th {\\n    background-color: lightblue;\\n}\",\"tx_data\":\"/*函式中的參數data為websocket傳進來的資料(data == e.data)*/\\nfunction dataFormatEntryPoint(data) {}\\n\\n// 定義函式，給定最小與最大值，回傳範圍中的隨機整數\\nfunction getRadomInt(min, max) {\\n    min = Math.ceil(min);\\n    max = Math.floor(max);\\n    return Math.floor(Math.random() * (max - min) + min);\\n}\\n\\n// 模擬資料更新\\nsetInterval(function() {\\n    // 模擬原始資料(JSON字串)\\n    var fakeData = `{\\\"ax\\\":${getRadomInt(-18000, 18000)},\\\"ay\\\":${getRadomInt(-18000, 18000)},\\\"az\\\":${getRadomInt(-18000, 18000)},\\\"gx\\\":${getRadomInt(-18000, 18000)},\\\"gy\\\":${getRadomInt(-18000, 18000)},\\\"gz\\\":${getRadomInt(-18000, 18000)}}`;\\n\\n    // 在DevTools印出 fakeData 內容\\n    console.log(fakeData);\\n\\n    // 將JSON字串轉換成JSON物件\\n    var fakeData_json = JSON.parse(fakeData);\\n\\n    // 在DevTools印出 fakeData_json 內容\\n    console.log(fakeData_json);\\n\\n    // 利用id名稱取得DOM物件，利用innerText方法插入數值\\n    // 利用 變數.key 的方式取得JSON物件中的資料，如 fakeData_json.ax 取得 ax 中的值\\n    document.getElementById(\\\"ax\\\").innerText = fakeData_json.ax;\\n    document.getElementById(\\\"ay\\\").innerText = fakeData_json.ay;\\n    document.getElementById(\\\"az\\\").innerText = fakeData_json.az;\\n    document.getElementById(\\\"gx\\\").innerText = fakeData_json.gx;\\n    document.getElementById(\\\"gy\\\").innerText = fakeData_json.gy;\\n    document.getElementById(\\\"gz\\\").innerText = fakeData_json.gz;\\n}, 1000);\",\"tx_ui_app\":\"# 群組標題一\\ntitle: 命令改變框中內容 , val: 預設顯示內容, val_id: val_1, btn_id: btn_1\\ntitle: 僅框中內容改變 , val: 等待改變..., val_id: val_2\\n\\n# 群組標題二\\ntitle: 僅觸發按鈕事件 , val: 點擊設定 , btn_id: btn_2\",\"tx_app\":\"/*Create events with id*/\\n$(\\\"btn_1\\\").addEventListener(\\\"click\\\",()=>{\\n    alert(\\\"可觸發按鈕事件，按鈕中框的值綁定id能夠改變數值\\\");\\n    $(\\\"val_1\\\").innerText = \\\"觸發按鈕改變內容\\\";\\n});\\n\\n$(\\\"btn_2\\\").addEventListener(\\\"click\\\",()=>{\\n    let v = prompt(\\\"可發送命令或數值改變, 輸入值改變第二個按鈕:\\\");\\n    $(\\\"val_2\\\").innerText = v;\\n});\",\"option_title\":\"資料表格視覺化\",\"option_home_color\":\"#333333\",\"option_home_background\":\"#ffffff\",\"option_version\":\"0.0.1-table\",\"options_flag\":{\"title\":true,\"footer\":true,\"systemStatus\":false,\"config\":true,\"schedule\":false,\"custom\":false,\"network\":true,\"system\":true,\"terminal\":true},\"libs\":{},\"lib_size\":{}}"
  }
}